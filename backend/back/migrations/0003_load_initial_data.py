# Generated by Django XXX
# -*- coding: utf-8 -*-
# Make sure to run this file with Python 3

from django.db import migrations
# from django.contrib.auth.hashers import make_password # For setting raw passwords if needed
from datetime import datetime
# from django.utils import timezone # No longer strictly needed if using fromisoformat directly for aware datetimes
from decimal import Decimal # For Product.price
from django.utils import timezone


def parse_datetime_with_tz(dt_str):
    if dt_str is None:
        return None
    
    # Handle timezone format issues
    # For +00:00 format
    if dt_str.endswith('+00:00'):
        # Remove the redundant :00 to make it compatible
        dt_str = dt_str[:-5] + '+00'
    
    # For +00 format, add the missing :00
    elif dt_str.endswith('+00'):
        dt_str = dt_str + ':00'
        
    try:
        return datetime.fromisoformat(dt_str)
    except ValueError:
        # Fallback to timezone.now() to prevent NULL values
        print(f"Failed to parse datetime '{dt_str}', using current time instead")
        return timezone.now()

def load_initial_data(apps, schema_editor):
    # We get the model from the versioned app registry;
    User = apps.get_model('auth', 'User')
    Token = apps.get_model('authtoken', 'Token')
    Product = apps.get_model('back', 'Product')
    Payment = apps.get_model('back', 'Payment')
    Order = apps.get_model('back', 'Order')
    ProductOrder = apps.get_model('back', 'ProductOrder')
    
    # --- Load Users ---
    users_data = [
        {'id': 1, 'password': 'pbkdf2_sha256$1000000$DvqCWxxbPurE37OM6BBmFM$cbZh0OvQOnEu5tChv3vw87VAPE2dTNJcQoXmPBXZdxA=', 'last_login': parse_datetime_with_tz('2025-05-10 11:39:51.727797+00'), 'is_superuser': True, 'username': 'supitsara', 'first_name': '', 'last_name': '', 'email': 'supit@gmail.com', 'is_staff': True, 'is_active': True, 'date_joined': parse_datetime_with_tz('2025-05-10 04:46:30.79658+00')},
        {'id': 3, 'password': 'pbkdf2_sha256$1000000$g6ZLM22lqAyonawLfZ8r6f$WatliXMFd8dnXDuQmQlCWwUmuVvaEYjtDda2Kaf2Yog=', 'last_login': None, 'is_superuser': False, 'username': 'Akkarawao@gmail.com', 'first_name': 'Akkrawao', 'last_name': 'Tao', 'email': '', 'is_staff': False, 'is_active': True, 'date_joined': parse_datetime_with_tz('2025-05-10 06:39:26.456054+00')},
        {'id': 7, 'password': 'pbkdf2_sha256$1000000$6QhGNm6NnDjEhRI62cQb3y$4B4fYPjPMAGitbk1HgwPLJZWkgp/IH4KQWuWjs05AO0=', 'last_login': None, 'is_superuser': False, 'username': 'kritsanao@gmail.com', 'first_name': 'kritsanao', 'last_name': 'Ho', 'email': '', 'is_staff': False, 'is_active': True, 'date_joined': parse_datetime_with_tz('2025-05-10 08:14:27.321675+00')},
        {'id': 8, 'password': 'pbkdf2_sha256$1000000$KDrIp92AFPYCRAFr9RaSnc$afGG/R/+EdaIykY9SVWWzwsI7RgjhEpalEeTj0co4KI=', 'last_login': None, 'is_superuser': False, 'username': 'natchanao@gmail.com', 'first_name': 'Natch', 'last_name': 'Nao', 'email': '', 'is_staff': False, 'is_active': True, 'date_joined': parse_datetime_with_tz('2025-05-10 11:46:14.070043+00')},
    ]
    created_users = {}
    for user_data_dict in users_data: # Renamed to avoid conflict with User model
        user_obj = User(**user_data_dict)
        user_obj.save()
        created_users[user_obj.id] = user_obj
    
    # --- Load Products ---
    products_data = [
        {'id': 1, 'name': 'รองเท้าขยะทะเลจร (Tlejourn Upcycles Sandals)', 'description': 'รองเท้าที่ผลิตจากขยะที่เก็บกู้จากท้องทะเล โดยกลุ่มทะเลจร ซึ่งเป็นองค์กรไม่แสวงผลกำไรที่ร่วมมือกับ Trash Hero Thailand ในการหาเศษขยะมาทำเป็นรองเท้าเช่น เศษผ้า อวนปลา ฯลฯ โดยลักษณะของรองเท้าขยะทะเลจรนี้จะสามารถสวมใส่สบาย ช่วยลดปัญหาขยะรองเท้าในทะเล สร้างรายได้ให้กับชุมชน และผลิตภัณฑ์จากขยะรีไซเคิลนี้ยังเป็นสัญลักษณ์ที่สื่อถึงปัญหาขยะในทะเล กระตุ้นให้ผู้คนตระหนักถึงผลกระทบของมลพิษต่อสิ่งแวดล้อม', 'price': Decimal('599.00'), 'stock': 20, 'category': 'Shoes', 'image': 'products/PD02.jpg'},
        {'id': 2, 'name': 'เซรามิกจากกระดาษสา (Saa Paper Clay)', 'description': 'ผลิตภัณฑ์จากขยะรีไซเคิลประเภทหนึ่งที่ผลิตจากดินผสมกับเยื่อกระดาษ โดยทั่วไปจะใช้กระดาษสาเพราะมีความเหนียว ทนทาน และสามารถขึ้นรูปได้หลากหลาย สามารถนำไปพัฒนาต่อยอดเป็นผลิตภัณฑ์ต่างๆ ได้อีกมากมาย  นอกจากจะเป็นการเพิ่มมูลค่าให้กับกระดาษสายังช่วยสร้างงาน สร้างรายได้ และเป็นมิตรกับสิ่งแวดล้อมอีกด้วย', 'price': Decimal('399.00'), 'stock': 99, 'category': 'Ceramic', 'image': 'products/PD03.jpg'},
        {'id': 3, 'name': 'กระเป๋าถักจากถุงพลาสติก (Merak On Earth)', 'description': 'ผลิตภัณฑ์รีไซเคิลที่ผลิตจากเส้นพลาสติกที่ได้จากการแปรรูปถุงพลาสติกใช้แล้ว โดยทั่วไปจะใช้ถุงพลาสติก HDPE (High Density Polyethylene) เพราะมีความทนทาน ยืดหยุ่น และสามารถนำมารีไซเคิลได้หลายแบบ ไม่ว่าจะเป็นกระเป๋าสะพายข้าง กระเป๋าชายหาดหรือกระเป๋าช้อปปิ้ง', 'price': Decimal('399.00'), 'stock': 199, 'category': 'Bag', 'image': 'products/PD04.jpg'},
        {'id': 5, 'name': 'ที่เก็บกระดาษชำระจากขวดพลาสติก (Moby Whale)', 'description': 'ที่เก็บกระดาษชำระผลิตจากขวดพลาสติกรีไซเคิล ออกแบบโดยแบรนด์ Qualy ของไทย มีจุดประสงค์เพื่อช่วยลดปริมาณขยะพลาสติกและส่งเสริมการรีไซเคิล เหมาะสำหรับใช้ในบ้าน คอนโด ออฟฟิศ  หรือสถานที่ต่างๆ ช่วยให้เก็บถุงพลาสติกและกระดาษชำระได้เป็นระเบียบ ประหยัดพื้นที่ และเป็นมิตรกับสิ่งแวดล้อม นอกจาก Moby Whale แล้ว Qualy ยังมีสินค้าอื่นๆ ที่ผลิตจากขวดพลาสติกรีไซเคิล เช่น กระปุกออมสิน ที่ใส่ทิชชู่ ฯลฯ', 'price': Decimal('399.00'), 'stock': 9, 'category': 'Home Essentials', 'image': 'products/PD05.jpg'},
        {'id': 6, 'name': 'เสื้อผ้าจากเศษผ้า (Upcycled Clothing)', 'description': 'เสื้อผ้าจากเศษผ้าเป็นผลิตภัณฑ์รีไซเคิลที่ผลิตจากเศษผ้าจากโรงงานตัดเย็บเสื้อผ้า เช่น ผ้าฝ้าย ผ้าโพลีเอสเตอร์ ผ้าชีฟอง ผ้าไหม ฯลฯ หรือเสื้อผ้าเก่าที่ไม่ใช้แล้ว เช่น กางเกงยีนส์ เสื้อยืด กระโปรง ชุดเดรส ฯลฯ นำมาแปรรูป ออกแบบใหม่ ตัดเย็บเป็นเสื้อผ้าชิ้นใหม่ที่มีคุณค่า ตัวอย่างแบรนด์เสื้อผ้าจากเศษผ้าในประเทศไทยเช่น Trash2Trend, Worn Again และ Upcycle by Waste Upcycling เป็นต้น', 'price': Decimal('899.00'), 'stock': 15, 'category': 'Cloth', 'image': 'products/PD06.jpg'},
        {'id': 7, 'name': 'เครื่องประดับจากกระป๋องอลูมิเนียม (Jewelry using Recycled Cans)', 'description': 'เครื่องประดับที่ผลิตจากผลิตภัณฑ์รีไซเคิลอย่างกระป๋องอลูมิเนียมรีไซเคิล โดยนำกระป๋องอลูมิเนียมใช้แล้วมาล้าง รีด ตัด ดัด และออกแบบเป็นเครื่องประดับต่างๆ เช่น ต่างหู สร้อยคอ กำไล แหวน ฯลฯ เป็นตัวเลือกใหม่สำหรับผู้ที่ต้องการเครื่องประดับแบบรักษ์โลก ประหยัด มีสไตล์ และยังส่งเสริมความคิดสร้างสรรค์ ซึ่งนอกจากเครื่องประดับแล้ว กระป๋องอลูมิเนียมรีไซเคิลยังสามารถนำไปแปรรูปเป็นสินค้าอื่นๆ อีกมากมาย เช่นกระเป๋า รองเท้า ของตกแต่งบ้าน ฯลฯ', 'price': Decimal('799.00'), 'stock': 24, 'category': 'Jewelry', 'image': 'products/PD07.jpg'},
        {'id': 8, 'name': 'ของเล่นจากกล่องกระดาษ (Cardboard Box Toys)', 'description': 'ผลิตภัณฑ์ขยะรีไซเคิลที่ผลิตจากกล่องกระดาษเหลือใช้ เป็นการส่งเสริมจินตนาการ ความคิดสร้างสรรค์ และทักษะการประดิษฐ์ ของเล่นจากกล่องกระดาษมีหลากหลายประเภท เช่น บ้านตุ๊กตา รถยนต์ หน้ากาก เกมกระดาน เกมทอยเล็ต หรือเกมอื่นๆ จากกล่องกระดาษ', 'price': Decimal('199.00'), 'stock': 96, 'category': 'Toys', 'image': 'products/PD08.jpg'},
        {'id': 9, 'name': 'จานชามจากกะลากะทิ (Natural Coconut Shell Dinnerware)', 'description': 'ภาชนะที่ผลิตจากกะลากะทิที่ใช้แล้ว โดยนำกะลากะทิไปต้ม ล้าง ขัด เคลือบเงา ออกแบบ ตกแต่ง  จนกลายเป็นจานชามจากผลิตภัณฑ์รีไซเคิลที่มีความสวยงาม ทนทาน ปลอดภัยต่อสุขภาพ และเป็นมิตรกับสิ่งแวดล้อม', 'price': Decimal('399.00'), 'stock': 46, 'category': 'Plates and bowls', 'image': 'products/PD09.jpg'},
        {'id': 10, 'name': 'กระถางต้นไม้จากยางรถยนต์เก่า (Handmade Planters from Old Tires)', 'description': 'ผลิตภัณฑ์จากขยะรีไซเคิลอย่างยางรถยนต์ที่ใช้แล้วมาแปลงสภาพเป็นภาชนะสำหรับปลูกต้นไม้ โดยจะนิยมตัดยางรถยนต์บางส่วนออกเพื่อลดขนาดให้เหมาะสม เจาะรูระบายน้ำ ตกแต่งเพิ่มเติมด้วยสีสันลวดลาย ซึ่งจุดเด่นของกระถางต้นไม้จากยางรถยนต์ก็คือการมีรูพรุนตามธรรมชาติ ช่วยให้น้ำระบายออกได้สะดวก ป้องกันปัญหารากเน่าได้', 'price': Decimal('499.00'), 'stock': 75, 'category': 'Plant Pots', 'image': 'products/PD10.jpg'},
        {'id': 11, 'name': 'โคมไฟจากขวดแก้ว (GlassGlow Lamp)', 'description': 'โคมไฟที่ใช้ขวดแก้วเป็นส่วนประกอบหลักในการออกแบบและผลิต นำผลิตภัณฑ์จากขยะรีไซเคิลอย่างขวดแก้วที่ใช้แล้วมาแปลงสภาพเป็นโคมไฟ อาจตกแต่งเพิ่มเติมด้วยสีสัน ลวดลาย หรือวัสดุอื่นๆ แต่ข้อควรระวังคือควรเลือกใช้ขวดแก้วที่มีความหนา ทนทาน ป้องกันการแตกหัก', 'price': Decimal('599.00'), 'stock': 995, 'category': 'Lamps', 'image': 'products/PD11.jpg'},
        {'id': 12, 'name': 'ปุ๋ยหมักจากเศษอาหาร (Organic Compost from Kitchen Scraps)', 'description': 'ปุ๋ยอินทรีย์ที่ผลิตจากเศษอาหารเหลือทิ้ง โดยนำเศษอาหารมาบดละเอียด ผสมกับวัสดุอื่นๆ เช่น ใบไม้แห้ง ฟางข้าว ขี้เลื่อย ดิน หมักในสภาพที่มีความชื้นและอากาศถ่ายเทสะดวก จนกลายเป็นปุ๋ยอินทรีย์ที่มีสีน้ำตาลเข้ม กลิ่นหอมดิน ปราศจากกลิ่นเหม็น อุดมไปด้วยธาตุอาหารที่จำเป็นต่อพืช ซึ่งวิธีนี้เป็นการทำผลิตภัณฑ์รีไซเคิลที่น่าสนใจมาก เพราะเศษอาหารเหลือทิ้งเป็นปัญหาขยะมูลฝอยที่สำคัญ การทำปุ๋ยหมักจากเศษอาหารช่วยลดปริมาณขยะ และรักษาสิ่งแวดล้อมได้', 'price': Decimal('299.00'), 'stock': 300, 'category': 'Organic Compost', 'image': 'products/PD12.jpg'},
        {'id': 13, 'name': 'กระเป๋าถือจากกล่องน้ำรีไซเคิล (Upcycled Tote Bag from Drink Cartons)', 'description': 'กระเป๋าถือรักษ์โลก ผลิตจากกล่องนมและกล่องน้ำผลไม้ใช้แล้ว นำมาถักทอด้วยมืออย่างประณีต ลวดลายสดใส มีเอกลักษณ์เฉพาะตัว เหมาะสำหรับพกพาไปช้อปปิ้ง ใส่ของใช้ส่วนตัว หรือใช้เป็นของขวัญสุดเก๋ ช่วยลดขยะและใส่ใจสิ่งแวดล้อมในทุกการใช้งาน', 'price': Decimal('199.00'), 'stock': 10, 'category': 'Bag', 'image': 'products/PD01.jpg'},
    ]
    created_products = {}
    for prod_data in products_data:
        prod = Product(**prod_data)
        prod.save()
        created_products[prod.id] = prod

    # --- Load Tokens ---
    tokens_data = [
        {'key': 'a6861f2707fee58671314ab6588ec9b434d2ef3a', 'created': parse_datetime_with_tz('2025-05-10 05:41:54.834737+00'), 'user_id': 1},
        {'key': '87c589c6fe057023119301108fb6af743ca5c263', 'created': parse_datetime_with_tz('2025-05-10 06:39:36.197764+00'), 'user_id': 3},
        {'key': '079a19f1f8c0e3a7aae712a302c40f525ecf6916', 'created': parse_datetime_with_tz('2025-05-10 08:14:41.222772+00'), 'user_id': 7},
    ]
    for token_data in tokens_data:
        user_id_for_token = token_data.pop('user_id') # Renamed to avoid conflict
        user_instance = created_users.get(user_id_for_token)
        if user_instance:
            Token.objects.update_or_create(user=user_instance, defaults=token_data)
            
    # --- Load Payments ---
    payments_data = [
        {'id': 2, 'method': 'paypal', 'card_no': '', 'expired': '', 'holder_name': '', 'payment_date': parse_datetime_with_tz('2025-05-10 06:41:22.455547+00'), 'payment_owner_id': 3},
        {'id': 4, 'method': 'paypal', 'card_no': '', 'expired': '', 'holder_name': '', 'payment_date': parse_datetime_with_tz('2025-05-10 08:16:04.319135+00'), 'payment_owner_id': 7},
        {'id': 5, 'method': 'creditCard', 'card_no': '1234567812345678', 'expired': '12/25', 'holder_name': 'Test User', 'payment_date': parse_datetime_with_tz('2025-05-10 13:18:06.45042+00'), 'payment_owner_id': 7},
    ]
    created_payments = {}
    for payment_data in payments_data:
        owner_id = payment_data.pop('payment_owner_id')
        owner_instance = created_users.get(owner_id)
        if owner_instance:
            # Your model uses 'payment_owner' as the ForeignKey field name
            payment_obj = Payment(payment_owner=owner_instance, **payment_data) 
            payment_obj.save()
            created_payments[payment_obj.id] = payment_obj

    # --- Load Orders ---
    orders_data = [
        # total_price is FloatField in model, so use float()
        {'id': 2, 'total_price': float('880.60'), 'status': 'pending', 'order_date': parse_datetime_with_tz('2025-05-10 06:41:22.458639+00'), 'shipping_name': 'Akkarawao', 'shipping_address': '12/45', 'shipping_city': 'kloangchol', 'shipping_state': 'Pathumthani', 'shipping_postal': '12100', 'shipping_country': 'Thailand', 'customer_id': 3, 'payment_id': 2},
        {'id': 4, 'total_price': float('662.80'), 'status': 'pending', 'order_date': parse_datetime_with_tz('2025-05-10 08:16:04.323871+00'), 'shipping_name': 'kritsanao', 'shipping_address': '12/45', 'shipping_city': 'San Fran', 'shipping_state': 'Ultra', 'shipping_postal': '52425', 'shipping_country': 'USA', 'customer_id': 7, 'payment_id': 4},
        {'id': 5, 'total_price': float('399.00'), 'status': 'pending', 'order_date': parse_datetime_with_tz('2025-05-10 13:18:06.456198+00'), 'shipping_name': 'Test User', 'shipping_address': '123 Street', 'shipping_city': 'Bangkok', 'shipping_state': 'Bangkok', 'shipping_postal': '10110', 'shipping_country': 'Thailand', 'customer_id': 7, 'payment_id': 5},
    ]
    created_orders = {}
    for order_data in orders_data:
        customer_id = order_data.pop('customer_id')
        payment_id = order_data.pop('payment_id')
        
        customer_instance = created_users.get(customer_id)
        payment_instance = created_payments.get(payment_id)
        
        if customer_instance and payment_instance:
            # Your model uses 'customer' and 'payment' as ForeignKey field names
            order_obj = Order(customer=customer_instance, payment=payment_instance, **order_data)
            order_obj.save()
            created_orders[order_obj.id] = order_obj

    # --- Load ProductOrders (Order Items) ---
    product_orders_data = [
        # total_price is FloatField in model, so use float()
        {'id': 2, 'total_price': float('199.00'), 'quantity': 1, 'order_id': 2, 'product_id': 13},
        {'id': 3, 'total_price': float('597.00'), 'quantity': 3, 'order_id': 2, 'product_id': 8},
        {'id': 6, 'total_price': float('399.00'), 'quantity': 1, 'order_id': 4, 'product_id': 9},
        {'id': 7, 'total_price': float('199.00'), 'quantity': 1, 'order_id': 4, 'product_id': 13},
        {'id': 8, 'total_price': float('399.00'), 'quantity': 1, 'order_id': 5, 'product_id': 2},
    ]
    for po_data in product_orders_data:
        order_id_for_po = po_data.pop('order_id') # Renamed
        product_id_for_po = po_data.pop('product_id') # Renamed

        order_instance = created_orders.get(order_id_for_po)
        product_instance = created_products.get(product_id_for_po)

        if order_instance and product_instance:
            # Your model uses 'order' and 'product' as ForeignKey field names
            product_order_obj = ProductOrder(order=order_instance, product=product_instance, **po_data)
            product_order_obj.save()


def unload_initial_data(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    Token = apps.get_model('authtoken', 'Token')
    Product = apps.get_model('back', 'Product')
    Payment = apps.get_model('back', 'Payment')
    Order = apps.get_model('back', 'Order')
    ProductOrder = apps.get_model('back', 'ProductOrder')

    # Delete in reverse order of creation due to dependencies
    # Filter by IDs if you want to be specific, otherwise .all().delete()
    product_order_ids_to_delete = [2, 3, 6, 7, 8]
    ProductOrder.objects.filter(id__in=product_order_ids_to_delete).delete()

    order_ids_to_delete = [2, 4, 5]
    Order.objects.filter(id__in=order_ids_to_delete).delete()
    
    payment_ids_to_delete = [2, 4, 5]
    Payment.objects.filter(id__in=payment_ids_to_delete).delete()
    
    token_keys_to_delete = [
        'a6861f2707fee58671314ab6588ec9b434d2ef3a',
        '87c589c6fe057023119301108fb6af743ca5c263',
        '079a19f1f8c0e3a7aae712a302c40f525ecf6916'
    ]
    Token.objects.filter(key__in=token_keys_to_delete).delete()

    product_ids_to_delete = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]
    Product.objects.filter(id__in=product_ids_to_delete).delete()
    
    user_ids_to_delete = [1, 3, 7, 8]
    User.objects.filter(id__in=user_ids_to_delete).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('back', '0002_alter_payment_card_no'), # <--- THIS IS THE IMPORTANT CHANGE
                                           # Use the EXACT filename (without .py) of your second migration
        ('authtoken', '0003_tokenproxy'),   # Keep this if using authtoken, adjust/remove as discussed before
    ]

    operations = [
        migrations.RunPython(load_initial_data, reverse_code=unload_initial_data),
    ]